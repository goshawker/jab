package #PACKAGE#;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;

@WebServlet(name = "#NAMESPACE#/action", value = "#NAMESPACE#/action")
public class JabActive extends HttpServlet {
  @Override
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
          request.setCharacterEncoding("UTF-8");
          response.setContentType("application/json; charset=UTF-8");
          String returnData;
          todoSql = "";
          String method = request.getParameter("requestMethod");
          if (method == null) {
              returnData = "-1";
              method = "";
              String html = responseHtml(returnData, "不规范的请求,确少请求方法！", true);
              response.getWriter().write(html);
              return;
          }
          if (method.contains("query")) {
              returnData = commonQuery(request);
              response.getWriter().write(returnData);
          } else if (method.contains("insert")) {
              response.setContentType("text/html; charset=UTF-8");
              returnData = commonInsert(request);
              String html = responseHtml(returnData, null, true);
              response.getWriter().write(html);
          } else if (method.contains("update")) {
              response.setContentType("text/html; charset=UTF-8");
              returnData = commonUpdate(request);
              String html = responseHtml(returnData, null, true);
              response.getWriter().write(html);
          } else if (method.contains("initDm")) {
              response.setContentType("text/html; charset=UTF-8");
              returnData = initDm(request);
              response.getWriter().write(returnData);
          }else if (method.contains("delete")) {
              returnData = commonDelete(request);
              response.getWriter().write(returnData);
          }

      }

  /**
  	 *
  	 * @param returnCode 成功：1，失败：0
  	 * @param message 自定义提示内容，为null则根据returnCode判断，展示默认提示
  	 * @param autoCloseWindow 提示后是否自动关闭窗口
  	 * @return String
  	 */
  	private String responseHtml(String returnCode,String message,boolean autoCloseWindow){
  		StringBuffer html =  new StringBuffer("");
  		html.append("<!DOCTYPE html>\n");
  		html.append("<html>\n");
  		html.append("<body>\n");
  		html.append("<script>\n");
  		if(null==message){
  			if (Integer.valueOf(returnCode)>=1){
  				html.append("alert('操作成功！');\n");
  			}else{
  				html.append("alert('操作失败！');\n");
  			}
  		}else {
  			html.append("alert('").append(message).append("');\n");
  		}
  		if (autoCloseWindow){
  			html.append("window.close();");
  		}
  		html.append("</script>\n");
  		html.append("</body>\n");
  		html.append("</html>");
  		return html.toString();
  	}

  @Override
  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws  IOException {
    doGet(request, response);
  }

  private String todoSql = "";
  private static java.sql.Connection connection = null;
  private static final String driver="#DRIVER#";
  private static final String user="#USER#";
  private static final String pwd="#PWD#";
  private static final String url="#URL#";
    public static java.sql.Connection buildConnect() {
      try {
          if (connection != null && !connection.isClosed()) {
              return connection;
          }
          Class.forName(driver);
          connection = java.sql.DriverManager.getConnection(url, user, pwd);
          return connection;
      }catch (ClassNotFoundException | SQLException e){
          e.printStackTrace();
      }
      throw  new RuntimeException("Get Connect Failed. ");
    }
  /**
  * query rows
  * @Author: goshawker@yeah.net
  * @Description:
  * @Date: 2022/10/26 20:57
  * @Version: 1.0
  */
  public String commonQuery(HttpServletRequest request){
    String JSONString = new String();
    todoSql="";
     try {
        #QUERYCODE#
     } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    return JSONString;
  }
    /**
    * update a row
    * @Author: goshawker@yeah.net
    * @Description:
    * @Date: 2022/10/26 20:59
    * @Version: 1.0
    */
    public String commonUpdate(HttpServletRequest request){
      int affected_rows = 0;
       try {
         #UPDATECODE#
       } catch (SQLException e) {
             throw new RuntimeException(e);
       }
      return String.valueOf(affected_rows);
    }

    /**
    * delete a row
    * @Author: goshawker@yeah.net
    * @Description:
    * @Date: 2022/10/26 21:25
    * @Version: 1.0
    */
    public String commonDelete(HttpServletRequest request){
      int affected_rows = 0;
       try {
         #DELETECODE#
       } catch (SQLException e) {
            throw new RuntimeException(e);
        }
      return String.valueOf(affected_rows);
    }

    /**
    * insert a row
    * @Author: goshawker@yeah.net
    * @Description:
    * @Date: 2022/10/26 20:59
    * @Version: 1.0
    */
    public String commonInsert(HttpServletRequest request){
      todoSql = "";
      int affected_rows = 0;
       try {
        #INSERTCODE#
       } catch (SQLException e) {
            throw new RuntimeException(e);
        }
      return String.valueOf(affected_rows);
    }

    /**
     * 生成初始化代码
     * @param request
     * @return
     */
    public String initDm(HttpServletRequest request){
        HashMap<String,String> dmMap = new HashMap<>();
        #INITDMCODE#
        String JSONString = new String();
        String sql="";
        try {
            sql = dmMap.get(request.getParameter("dm"));
            /** TODO Auto-generated  */
            java.sql.PreparedStatement ps =  null;
            ps =  buildConnect().prepareStatement(sql);
            java.sql.ResultSet rs = ps.executeQuery();
            JSONString = toJSONArray(rs).toString();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return JSONString;
    }
    public static JSONArray toJSONArray(ResultSet rs) throws SQLException, JSONException {
        JSONArray array = new JSONArray();
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();
        while (rs.next()) {
            JSONObject jsonObj = new JSONObject();
            for (int i = 1; i <= columnCount; i++) {
                String columnName = metaData.getColumnLabel(i);
                String value = rs.getString(columnName);
                value = value == null?"":value;
                jsonObj.put(columnName, value);
            }
            array.add(jsonObj);
        }
        return array;
    }
}
